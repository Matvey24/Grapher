<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
<properties>
<entry key = "name">Графер</entry>
<entry key = "titles">Функция
Параметрическое
Неявное задание
Транслирование</entry>
<entry key = "settings">Дискретизация
Чувствительность
Набор цветов
Область опред.
Линий в клетке
Сохранить картинку
Секунды:ФПС
Бумеранг
Время вкл.
Цвет</entry>
<entry key="actions">Назад
Обновить
Готово
Установить</entry>
<entry key = "colors">Спектр света
Тепловизор</entry>
<entry key = "states">Преобразование..
Пересчёт..
+
загужен
Сохранено в </entry>
<entry key = "updater_errors">Нужны 2 функции в параметре и транслировании.
Нужна переменная t или x и y в %d графике
Слишком длинная 'goto' рекурсия: длина</entry>
<entry key = "calculator_errors">%s в '%s' %s
%s в калькуляторе
%s в грамматике '%s' %s
графике
функции
Слишком много переменнных
константе</entry>
<entry key = "parser_errors">Непонятный символ '%s'
%s в %s
Слишком мало аргументов
Слишком много аргументов
Криво размещены(а) %s
скобки
Переменные и лямбды могут быть в $..$: '%s'</entry>
<entry key="version_controller">Ошибка загрузки лога!</entry>
<entry key = "buttons">Начать
Настройки
Таймер
Сохранить
Загрузить</entry>
<entry key = "helpers">Помощь
Помощь пользования
Помощь с калькулятором
Дополнительная информация
Лог версий</entry>
<entry key = "resizers">Масштаб
Ось X
Ось Y</entry>
<entry key = "text_elements">Графики
Функции
Счетчик</entry>
<entry key = "main_settings">Язык
Ширина сетки
Кол-во графиков</entry>
<entry key = "help">help 9
part 3
Нарисовать график
Нажмите "+" и напишите функцию в появившемся текстовом поле.
Затем нажмите Enter.
part 5
Таймер:
Напишите выражение для графика, используя переменную 'tm', затем нажмите 'Таймер' и кликните 'Начать' в открывшейся панели.
Можете настроить таймер в этой панели.
Напишите '0' в поле 'Секунды' и 'tm' будет числом секунд с запуска таймера.
Так же можете нажать правой кнопкой мыши по кнопке 'Таймер', чтобы запустить или остановить его.
part 4
Масштаб:
'Правый' клик сравняет масштабы двух осей.
'Левый' клик по этой кнопке сменит её действие:
Ось X/Ось Y - повороты колесика мыши/жесты на тачпаде будут менять масштаб только Оси X/Оси Y.
part 2
Дополнительно:
'Правый' клик по кнопке '-' в поле графика откроет панель дополнительной информации.
part 2
Параметрическое задание:
Используя переменную t, напишите выражение для x, поставьте ':' и напишите выражение для y, нажмите Enter.
part 11
Неявное задание:
Равенство:
Графер покажет цвет, где выражение верно. (Чувствительность - максимальная разность между двумя соседними пикселями вокруг нуля)
f(x,y)=g(x,y)
Неравенство:
Напишите неравенство, используя x и y и Графер покажет цвет там, где это выражение истинно.
f(x,y)&lt;g(x,y)
Спектр:
Напишите функцию вида z(x, y) и Графер покажет цвет, который зависит от значения выражения от синего до красного, как в тепловизоре, или от красного до фиолетового по радуге.
Чувствительность - для контроля толщины радуги.
z(x,y)
part 2
Трансляция:
Трансляция - изменение положения точки, напишите выражения для x и y, в зависимости от начальных координат точки, разделите их ":" - как параметрическое задание, только вместо t x и y;
part 5
Примеры:
f(x)=if(x&lt;1,1,x*f(x-1)) - факториал
2sin(t):cos(t) - рисует эллипс
cos(t)*sin(tm*t):sin(t)*sin(tm*t) - полярные координаты r(a)=sin(tm*a)
cos(x) + cos(y) - красивая картинка
part 6
Настройки:
Изменение языка в настройках.
Здесь можно сохранить/загрузить проект.
Ширина сетки - минимальное расстояние между линиями сетки графера,
Вставьте '-' перед числом и графер не будет показывать координаты
Кол-во графиков - сколько функций графиков отображается одновременно.
help 9
part 4
Как пользоваться?
Введите пример в поле счетчика и нажмите Enter.
Нажмите правой кнопкой мыши на поле счетчика, чтобы сжать окно Графера.
Если хотите, можете добавить свои собственные функции и константы, их можно написать в поле 'Функции', отделяя их друг от друга нажатием Enter.
part 4
Личные константы:
В поле функций напишите имя константы + "=" + напишите пример.
Вы можете переопределять внутренние функции и константы.
Константы вычисляются в порядке, в котором записаны.
part 4
Как писать личные функции?
Напишите имя функции + "=" + выражение.
Вы можете вызывать переменные по этим именам: x; y; z; t; x + какая-нибудь буква, например x龙.
Строки без знака "=" считаются комментариями.
part 5
Мат. знаки:
+, -, *, / обычные знаки
^ - возведение в степень
% - остаток от деления
&lt;, >, = возвращают 1, если выражение истинно, иначе 0
part 23
Функции:
sqrt, cbrt - квадратный и кубический корни
pow - возведение в степень
exp - экспонента (работает быстрее, чем "e^x")
sign - знак числа (-1, 0, 1)
lg, ln, ld, log - логарифмы
sigm - сигмоид - sigm(x) = 1 / (1 + e^-x)
hypot - гипотенуза - sqrt(x^2 + y^2 + ...)
sin, cos, tg, ctg, arcsin, arccos, arctg, arcctg, arctgTwo, sh, ch, th, cth - тригонометрические функции, встевьте 'd' после названий чтобы конвертировать радианы в градусы
abs - модуль числа
floor - наибольшее целое, меньше данного
ceil - наименьшее целое, больше данного
round - округление по математическим правилам
random - случайное значение от 0 до 1
min / max - меньшее/большее из нескольких данных
arr(idx, a...) - возвращает элемент данного массива 'a' возвращает длину массива, если idx = -1
if(x,y,z) - возвращает y если x не 0, иначе z
ifs(x) - возвращает 1, если x не 0, иначе 0
массивы: двухмерный массив значений
set(x, y, val) - устан. значение в массив 'x' на место 'y', возвращает это значение
get(x, y) - возвращает значение из массива 'x' на месте 'y'
for(start, end, func) - выполняет 'func' - лямбду, передает в неё целый индекс от [start до end), возвращает сумму возвращенных значений func.
assert(x) - создает ошибку с параметром x
part 17
Константы: (в СИ)
pi - пи - 3.14
e - экспонента = 2.71
G - гравитационная постоянная = 6.67 * 10 ^ -11
h - постоянная Планка = 6.63 * 10 ^ -34
c - скорость света = 3 * 10 ^ 8
eps - диэлектрическая проницаемость = 8.85 * 10 ^ -12
NA - число Авогадро = 6.02 * 10 ^ 23
R - газовая постоянная = 8.31
k - постоянная Больцмана = 1.38 * 10 ^ -23
EARTH - масса Земли = 6 * 10 ^ 24
SUN - масса Солнца = 2 * 10 ^ 30
PROTON - масса протона = 1.67 * 10 ^ -27
ELCT - масса электрона = 9.1 * 10 ^ -31
eCHARGE - заряд электрона = 1.6 * 10 ^ -19
au - астрономическая единица = 1.5 * 10 ^ 11
pc - парсек = 3.1 * 10 ^ 16
part 2
Рекурсия:
Вы можете исполизовать рекурсию, но будте осторожны: продолжительные рекурсии выбрасывают ошибки stack over flow.
part 3
Лямбды:
Вместо параметра функции напишите выражение для какой-нибудь переменной в '{..}', например '{x^2}', если используете внешние переменные или лямбды, напишите их в '$..$' перед скобками, например '$x,y${x*z+y}'.
Далее в самой функции используйте 'f' + 'буква', как функцию, например, 'fa(x)', можете передавать эту функцию в другие, написав ее в качестве параметра без каких-либо скобок. 'func(fa, 4)'
part 14
Примеры:
sqrt(4) == 2
pow(2, 4) == 16
ln(e) == 1
log(8, 2) == 3
arcsind(1) == 90
arctgTwo(1, 0) == pi / 2
В поле функции:
num = sqrt(5) - num - константа
lb = ld(x) - то же, что и ld(x) = логарифм из x по основанию 2
myfunc = sin(x) + cos(y) - используйте, как myfunc(x,y)

deriv = (fa(x+d)-fa(x))/d
d = 0.000001 - производная функции, используйте deriv({t^2}, x)
help 6
part 4
Предупреждение:
Графер может некорректно отвечать на непонятные ему запросы, например, f(x)=rx, r=2
Слишком много аргумертов!
r - функция, поэтому, если за ней подряд идет что-то ещё, то считается, что это аргумент (sinx), a у r нет аргументов. xr - целиком переменная, а xra (ra=2) - работает.
part 3
Время вкл.:
Если эта функция отключена, таймер не обновляет график, это увеличит производительность на тяжёлых анимациях.
Если хотите обновлять график редко, используйте функцию 'update_graphic(idx)', Графер точно обновит график во время итерации таймера после вызова функции.
part 10
Параметры:
Если назвать константу "lookX" или "lookY", Графер переместит камеру в эту позицию, точка (lookX; lookY) окажется посередине экрана.
Создайте константы "scaleX" и "scaleY", чтобы изменять приближение, scaleX/scaleY значат, что в единице графика scaleX/scaleY пикселей экрана.
Можете использовать эти константы в своих формулах без инициализации.
Если вы используете рекурсию констант, (для сохранения значения до следующей итерации таймера), до определения константы будут равны 0.
Используйте параметер 'goto' чтобы поменять следующую считающуюся константу (константы нумеруются с 0) установка 'goto' значит, что следующая вычисляемая константа будет под номером 'goto' ('goto = goto' - бесконечная рекурсия).
Используйте 'finish' в выражении 'goto = finish', чтобы преждевременно завершить итерацию, функция 'finish' возвращает число вычисляемых констант.
Используйте параметер 'gotoLen', чтобы установить максимальное кол-во раз, которое 'goto' может быть использовано за одно обновление или цикл таймера. (защита от бесконечной рекурсии)
view_movable - если 0, нельзя перемещать изображение, нажимая кнопки мыши.
Используйте getMouseX(), getMouseY(), isMousePressed() чтобы знать о мыши, координаты не обновляются, если не isMousePressed().
part 3
Лямбда в калькуляторе:
Отправьте лямбда выражение в калькулятор, чтобы получить более одного ответа. Лямбда от -1 должна возвращать число ответов.
Используйте 'arr' как главную функцию, например: '{arr(x, 4, 5)}' вернет '4.0,5.0'.
part 14
Горячие клавиши:
Ctrl + S/L - сохранить/загрузить проект в/из последний используемый файл
Ctrl + Shift + S/L - просто сохранить/загрузить проект
Когда вы редактируете код в поле функций, используйте следующие комбинации:
Ctrl + Enter - вместо 'Обновить'
Ctrl + Shift + (Вверх/Вниз) - переместить строчку вверх или вниз
Ctrl + Shift + Del - удалить строчку
Ctrl + (Вверх/Вниз) - сузить/расширить поле
Tab - в главных полях поможет (не поможет) дописать имя функции или константы.
Ctrl + P - используйте комбинацию осторожно. Она рисует график мышкой на экране.
Как она работает? - рисует все линии графика, но не рисует Неявные задания и буквы (цифры).
Рисование линии: перемещение мыши в начало линии, наживание мыши, перемещение в конец, отжатие.
Убедитесь что приложение поддерживает эту механику.
Левый верхний угол графика будет там, где была мышь при активации функции, размер графика такой же, как в графере.
part 24
Сохранения:
Все сохранения в формате xml в java properties.
Файл состоит из нескольких параметров:
calculator - сохранено поле "Счетчик"
functions - поле "Функции"
timer_info - четыре числа, как в настройках таймера: длительность:фпс и на новой строке интервал
view_params - четыре числа, каждое на своей строке:
lookX, lookY, scaleX, scaleY
look x и y - координаты центра изображения
scale x и y - колличество пикселей экрана, которое помещается единице на графике
graphs_count - колличество графиков - любое натуральное число или 0
graphic+номер - поле графика
graphic_info+тот же номер - информация о графике:
1) название графика - например f для f(x), суть названия - определить цвет графика, там также может быть hex-значение цвета, например 'f ffff0000' - 'имя aarrggbb'
2) дискретизация (натуральное число >= 2)
3) включено ли время (true/false)
4) тип графика (Function/Parametric/Implicit/Translation)
дальше зависит от самого графика
если Function, то ничего,
если Parametric, то интервал,
если Implicit, то Чувствительность и на следущей строке вид радуги (0-радуга,1-тепловизор)
если Translation, то кол-во линий в клетке поля
main_settings - настройки приложения:
первая строка - расстояние между линиями
</entry>
</properties>